type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Hypergram</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/images/testImage.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAE4UlEQVRIS51WTUxcVRT+7n3zg5SfdlpIjUlpqC5qC5WVqN2LStNhY+K0NdVVuzWi4EJjTJA6LowxqSb+kBTHZSE0hkCjCRBlZwu0uBHb1BjS4EA7Uebvvavn/rz35s2bofUtZu4779zzfec75/6w9u8nxUakEwIWBATkw+jHMQMwAQhORhooF+2kbHKCdPLG9M603Z2i5zMGhtkbbigVxASS6Dq+H5CC+/1MVDIzPZ0DjIjX8JNhZ5eJWmUW8lUT8NHystWMhM6K/rlxpH8iV/+pzNjg+8GMWkYIXwmUIpRl2ATi7peefEkFRZrhqpa6xlyPt3YgOf0lcB0C9RSWvwaV6TMRrLH57mehbRKQeTWX1dDvrrvj2aQSQIJvICvaPFWk3SHglRCUAHsJYurmyeX2BncAx9RJ+SUYASZ8vWNgFFmGGZKaoZP/hi5+XTpOlge8fnNF8DWMW6tKBRPsL2TFXtA/BciKfUhFx5EppuS7yn6vqlTn1SmhABmWnWOyAdacQ15Xy+RrLQuVpQH00zgb/Rpjpdd9LULEba+5Xv1hUDxq/YkWbCHGbNmlFwvn0cWXZL0mnQG9mYQvjwTLyg8kayqawaLdi15rEdPlPmkfjo9iMJ9GKvotMuUUElCqsHfnXhbNuC8BNx1Vk5HCMDr5msx0TRxSS4a2r+CjTQRogIxLX2QaPdY1d8Zg/iNJjMApLkvP9anpcnvTDSIc+b5QelbaJm2qeQgwgFQkg2lbZxcbxT3Rgj/EYzjCV6t4/mI/pYAp6jtzp8QeKZfpSu2vwYcLIyiLmDIGXJRREUrHB12HG/ZhHLFuVkz4sDjk63KApedfDE9FxnQwWPjYMHEbw01FqkSgb4YfGprpptiNz0vn3F6QOZz88QNxPPJTaDqbzh6MFId9klVzpOaixko3vB2QVvnS7zW7R46NzBI4Pf+CuFg8h/OxLyoAFkrPYdJJVtXJfyzKTi29orKuAvbKQDWirG85HciUT6nmujD/kuCC1pfaUYhhJp9EkTfhlnMAjzj3sM1bZXAa09PqrLuECmwXkvFZtPEsdvFiNVEAb21fkLureRgcsMaZefFG/DO0sJzbKMy9EDB8db8POYv2WoZm564cJ+w7KKEBbfaveLrxDq7/3QomHBxr3kZ7rIhtmyNesMEbGbKfOuAtwPX+uMT9hyXQKLJg/RMnhRAMgnPsjth4fCaP6ICFuCWQty0sbsVQ4g1SiigKSibqeNNynIMJG082laXFYkDz7zY5A3RrKQhsHbSwmovoGeocYP2XCdiTofu7ApZScd8Vh5a0OvAlnj4/pC1kfTVwgSfGi2h6HsgdtLCSi+BwsyK1miM2qvYS2F+YrkwBywS8w3P09gmsdEzV9FJxGmp+Z/2XkwHgfOiEo7f7sdJxpSpQLXtXpjqO37cK2B85OXQWE6NjrunSOHDm9E5aAPu7f0bbUM/DZbxzWM+DANaXngmZEtxognutrvGlcYYzpwV2qhshGN8wgt78ylujP25y6DVMjH5T2Vx+h6njGzixsO+BBDDBHsjZLKpgV9fPxPv6f8D8sdnQJ18Ksyze77qL95bb6xKvXw4G1YCqxkFf9X5FXvd1V4efjGFZ1arx/u5FrC/11ldbAMlhqvEYVMYH9EYQetA/TOXqNLh7Y2YQ/91S/wXtwCFuAL7UBQAAAABJRU5ErkJggg==
  learner_created: false
- name: test/images/testContrast.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAEZklEQVRIS51XXWhbZRh+vu/kLGuWBIrWbmNanDWVhmW92Nyu4hDG2JjDgQMZghTcECEIXtSq69UczuiFEJCBg96JoNIiYVq8GPRChMFYW1KWQYeloTTIcKYn7cLJ+Y58Pyfn5OTkZPW9yffzfs/z/veU4GHJxq5RtAlt34IBiKgzvu4m/js/Dt9zHQoQrNt2CJRQEhJG6ABwHY5GJHiYBBN7H3kJ/eQOCf/Vwon8t+3EQd454VEh6oB37oN4Q0JPsKFC7VV6GrAeoQxNzVPl2Js/vvanwW+kN8eiKDcBlnBrROn3Li4/cVBIecU3fRe0DrA9wYkXHldUqCNlpLUZoVhqTHZWpT8VQZBUecd/eWjYHmT7JjFfvy61He9F4W/ctyUhRck6D1ALaL7iwobl29FyCD3GnO77AL9uf+ue+AqNnPw7Z6d3LWEfKogRE6AUOeMW0tosYFOUmhPhfSK8432eQLbvY8yb48jq05hvXBHHhfgYcrUVedf4EkANYEmQqdox+zlsCMI1a0go5zdvA5H7AGMAG5VhD6pi5YUElUSOZKOf44L+U2vfRs4AUqgNyclFOTIfOdx6S+xvbL8nU2AG5FxBZqPcS+VdbAzrbB/u2Rmc0eY6IvWj+ZbyGiATtRP283TVJXXUFXnOeNjeCl0CX4gfbGHcMk/hjP5bG2Zu655sKyWkYBzsPquZhZzxV/ccq/B7Sd1h7TQ0sMYOIP+k2KoFviDpR9fs96M3Oz0GsGa9gHz9do/iksVSSL7k05P+8DL42bwg1rK4pJCC8aKd2yqiEHvD89DGje3LKFmTnaSethBFtS3BOon5qRNMIrz+03oV842vhDXkG2PY1pgpy5b3PIAPa3kgMgA0jwDWOqDtlwbwNZfmsmsQfRbvxK9jOLKKZ7R6YHRyj1c6uoKgYtifJE5iL6m2LKTOhOc9vXEF0F8GGAWsslybdwEkEDd/x7v9dzHzaD8oa+L84L9Ixep4bEaQMExo/QSrr1vQ9gIzV+PCqH/oEPrZKkhqKW0zRsEiGg5ETbz2RQ27v9YR123UTB3TlRieRJIiFLthiN6mvOKV8HeUmTg90BAnOgUG/zCBPj4iKbDJUDmuY64aVS/kKCSphbTNPHX95mUDs9/F3fTwJBAm+lrw8Va31VnAVElGGE6Mb2HgU6B6XEexGsWpQWnUXJVbw0URexNz7pKBXzhxDzl75xqKRz/rqiVxkl3vSWrhUFsfn7tUC3xw9s5VFI9OdQB1Ow/C8ep2EHuR84e/x8TCxdZReRwYme4VC2A0s4ThY0M787g3rKvBCZYXDwU86fWdq3JcHqcYmWbolTfO4OgGGei+b/9q9OLmD/+AiYW3ZVU7IF6FcmYFI4v+MRgcDwdsJ9FqI+72MCgS/4fMi08+ujlrO21RzjzAyGIq1PDwdFDIApQ59uvK/ZT49ldVHfz/SZBX3XI8milheTEdHm0byI/xHF+E9PiIGgTqA2Qnueqp6/6BUtOQgpEm/gPNJ9QOGP9afAAAAABJRU5ErkJggg==
  learner_created: false
- name: test/images/testBrightness.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAADaklEQVRIS+2Vz0tUURTHP3emsvJXSYrRIujHwvxRLiKttlGLDCGiH4jZskWbwMBVtKlFf0BtojKZAhmyXxC0lRQKytEyIkIqSiK0MtKxZk7c+959vpl58yNJVx14897cd875nu8533ufOiUiXwBxLwJM5XgX5F/ImjosojEX3f4DL1rLF7zVFcBEkGAXSlzZAG0NHuMNQD1vzPodNs2r5RZM37VppscYJkK9+e8vRnWJiAOoGGajcXj7l7BB7Dp4wjW2Z82kHshTWctHyvjKMhKmgEscd9kr7rjFZMuQyi7GIA00EeMhDSaki246aecYMSI0eKzVC4lKKd8N4KRZhvO0oFtfKHud1ALZAvcRo5HnXr1+cL2o3slV9+TSB6O+tCXNcz87zT3XzP2gmt03yvjAOmoZzWjSM7YZ1gZ4SO7KaiMDC2r9HfAujvO7gJlf5LqX4wU11PIyJecF2lO2lXon13Oc1Uk66cgL6wd1Pjf2s+KQmWQVlzngKd0wjshr2c3jAMY6YLWZdy6zir5Id5qbw0f/PqfRPNs2uzO+JlrFJ1MChX525d3PVqk6USawhTUwhvUY64mw1ZnxmHRLyN1G1jVCK7OUMEaYFcC0y0U/ayvnh8cuTjGtPKKSCYqZDWzOGdoNc2tGxidE5DS3KWPK+9wrz01xhX1MUWmqLuWzea7gPb9YTiWv2MF7hihHkWQr01QxyzQhikgQQjERTRIqg6E9RQb3JxWsZAJ1QyIiaKgQq0iwaWCGpc1hihBmCDPIMgOibSlxU5wGsabjFAm2uNoPA6U/EtoZQgriwteSMKMscUMc4bnAc21oiMaJHXSqm2uNo9TUdln1pnZ3OcLm6Cwle2GqJMwIS6hxixo11TgDNcD+0PponOE04KDB1Y23MFJ9L3CmetHJ43QqyNQNuZkGPBMYUDe+n5Hq+xk5sq3XRzPz+H0zgP2ZW88eoe/cLW+prRd6DmUl4b2oZoDKaOPfMc6fds5DA4zTHBCSfhimH8fujNt6FT2HhHxz0wjWN/fcLZBTgD9v69mj9J27mSouv0MbX+hhTUENsMkKcnadMlRdqILnA+bPrZ59mhK7Ldr4TA9VOQvPPQ6FI8DMFs+1/D4hfSo42yn4yxjEKtuMqxlknKa83XZy3iKFcd6of+KgT8AkfwArb3FjojS+TgAAAABJRU5ErkJggg==
  learner_created: false
- name: test/images/testTransparent.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAEJklEQVRIS51XXWgcVRT+5jAuwzYJcYmLiJQQig9tWeKLVvRVWmwloQ9C6v9T8FWIMQo6IrYs++CDSBURFYnBJ1NKwRBEQhTbJ+uaFnwJQYqUEjZpDcswDBc9587PnZ+dWb0szP0593znO+fcc+9azSuX3F17CgBBIWzE33gEUoAinkzmWF43ngvXFH8NuUgk0hvvJ1hYv+HG84WK00bkAZPdKcvZ2pRhhhzAwL8bwKaJEZMixWklMoqBZFAgkAM2GZfIx3aY7o5AsiEIxznXR3I5V5cZaiqLSA0AlOjYg11F4uoixllWrCh0X1E0YnEjPGGONWgXPTQBFQpxkiqVjbGZ1hnwCNjIzJiSTnvzSEAAVaPYhcJ4TTOeom206LoIrgZn8/kRK84mUqK7AWY3Af6yAu6fs5fxjT8nQpr9hPStqfXLrgYkdFVLsnNbHTHOZ/Y4mSQ0ywjQXHnF/gJfBq8mU2J4EHvFeumHN9yH7L8win3UeIEIF715tKgrxqyq2UzhSHuvgZ5M9NDAOXsFV9XjOEHX8H1wUuaXnDYWvI5mHsyB5VnWemfjOXcU9wRwL4zJeW9RXM9tW03JWrpqpcEZMAKKVk7Za3jU1qHjtuC1xTAGF1d3Nk7pAiLKw8YZSISf/SdkYlWdHQgsoCpkV2vjrhrDLTyMY3QzbR2AX4PpBPitjRfc+0m7K9VC8CXvAwSo5dcTK6XXcRbjmRvBURyz08AX/MVUlludzWeMkpkHX/A7JaDaSx1noUQG2FPj+CSYF5noiFmzP77vPmn/UriRY37eT5gUCUXJYjI25bga/BZMy1QUX+4L44v+PF6rfZrSy/HVGT2oUZypWVcX7WDWO2oyiXF784xLis8XyY8tXPFm4NMIdtRh1NU++jQuurjPbUzdjnX7GMGss44J6uEQ+YVWLvbbSWELb36rvrbpvu58DDlSYYufBET4/N5JHBBXG8KIuiP9hroFHw6awR94rP4nuv1xqb/TY308UPPRDwiOr0B1YO8jBRoDrp92RHsfDdTRg3Xmu1lJLn5hjNsKR9Y93DdDqNmAFxCu7dcQkN5kwxcA460i+0gpHB3RVYlP5eh2ADkIPPAU7k7auHlg3lYIgY37oPWth+6ck3nlhLeO8crRF3/+wndI4ZFlH4eeBv6etLF1YMdGmeAx48jNrZUQuCSteOn4zmlsTV4ZKFWlZ2jgQUCD5ouATdkcsElhZullXLrwVTz19TLw4vMVrgDwYOsqmkvTOmQDWilwFQQD3O6eqBIrXBfgiElV3FhDGethwhF5McXY3Hj5qV08+5N+LVS1bEiq5Hl9KFcXMfk/YKZB1psffuZGx+K943fw7laz1OCqcJihyMpGYz79/ymry2I8VKIpYOZtfVI048NhIaj+5zFM+NIyyZ+HpBr+W/X+ATW9x3k6pYDKAAAAAElFTkSuQmCC
  learner_created: false
- name: test/images/testMultipleFilters.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAADAklEQVRIS+2WTUhUYRSGnzszTQqCBZm0iRZRlIEgOPSnlLOxEYcWhRANQVvBKBCxaCRTo0WBkIs2QbiyomDCwUVDi34gvVgRFNEuMJIkCYKm6Y637nfvN3N/5k8R2/ht7syZc857zvue79xR0HWV/3CUdeC1Yn2d6rViGgfVEeYFcJL6VSugm1nGaPLkE8AmoJ8kW1YN8DJJrhIpmk/p05+ox0jQwBs2kxYFBHjJSorpZoYxmpFPA1WjhQDPHDbDrrzXz6i7+CAAZ2kWFYYYXVbndiAZaNhGuZDL4wZXND1krUy/ADdPRnyO8sCSoLjm7u7esYeHHGeAa57iz3FTMCI6ntZ71CZmbKDS3wQ3aK/kaBzM5bhCPwMMOXIaHduPoumHS7wkMgR4VRbXDgpZC1A+YZZGQtxyAkf0OTXBiQIdGwFNFettDJHzGMCwBJy3ZkbSLKjW9AOqQaczMEuUR2Xvs1tfLzUmuDm4jdzlNGPsNzVO661qwLpGssJghbpKoDsM0co0O1gsKItbXwFsLJDXnKWBT5j6gM96Fh+u38BG6rjNOPfoZR8+MtxgjiMs8oUgW/lFAD8zsQzBvdDbby6nz4TYzjRKmx5RNfwssYFG0nTfn6f2ZDV1ZPlKNafYxA+2iaBavomV4ONPrjMjzkeaOD+FrQrYLRg0KTaaeUsVI9Q4bBZwnqHrsQX6xp2rMyBGxIdmI1La3NzWs0RP7Ds7x+EjVcSp4aJV1Ai1lnvW7NgePBxb4JILuJBwg0wSp6OgpobRzFN88ShteqcLeL5gwCAJ4kQ9QMXswzFvHruvB9ieOaUkCOt5sFQXhCeKNpn7oZ3HtMRCy+u4fNq8hwEwRWeBEHl/5U/yHSC/WxqnuvyEJ7KU080Ik76ldZdAZgH2vCllkrDe4RwuhwMvCHOoIgJksoqcLSfPVFc6wSsBs+dWnuu6Kq9FiqeEOVqy8NJy+DEH0EtxnvIoQWNlmtfJPQwmdqGuimncTpKpEv+xZDdmziiOjpej0cp9/Wj/Vu5fQ7wyEpiUFGgAAAAASUVORK5CYII=
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const pixels = require('image-pixels')
    const path = require('path');

    const {StageTest, correct, wrong} = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const imageFolderPath = path.resolve(__dirname, '../test/images/');
    const initImage = imageFolderPath + '/testImage.png'
    const brightnessTestImage = imageFolderPath + '/testBrightness.png'
    const contrastTestImage = imageFolderPath + '/testContrast.png'
    const transparentTestImage = imageFolderPath + '/testTransparent.png'
    const multipleFilterTestImage = imageFolderPath + '/testMultipleFilters.png'

    function comparePixels(userPixels, correctPixels, errorMessage) {
        if (correctPixels.length !== Object.keys(userPixels).length) {
            return wrong("Wrong number ox pixels on the canvas!")
        }

        for (let i = 0; i < correctPixels.length; i++) {
            if (correctPixels[i] !== userPixels[i]) {
                return wrong(errorMessage)
            }
        }
    }


    class HypergramTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                const canvas = document.getElementsByTagName("canvas");
                if (canvas.length !== 1) {
                    return wrong("There is should be 1 canvas element in the page!")
                }
                this.getPixels = () => {
                    const canvas = document.getElementsByTagName("canvas")[0];
                    if (canvas.width !== 30 || canvas.height !== 30) {
                        return wrong("After uploading an image into canvas it has wrong size!")
                    }
                    const ctx = canvas.getContext("2d");
                    return ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                }
                return correct()
            }),
            this.page.execute(() => {
                this.brightnessSlider = document.getElementById("brightness")
                this.contrastSlider = document.getElementById("contrast")
                this.transparentSlider = document.getElementById("transparent")

                if (this.brightnessSlider === null) {
                    return wrong("Can't find a brightness slider! There is should be an input tag with #brightness id.")
                }

                if (!this.brightnessSlider.hasAttribute("min") ||
                    !this.brightnessSlider.hasAttribute("max") ||
                    !this.brightnessSlider.hasAttribute("step")) {
                    return wrong("Looks like your brightness slider doesn't have one of the following attributes:" +
                        " 'min', 'max' or 'step'")
                }

                if (this.contrastSlider === null) {
                    return wrong("Can't find a contrast slider! There is should be an input tag with #contrast id.")
                }

                if (!this.contrastSlider.hasAttribute("min") ||
                    !this.contrastSlider.hasAttribute("max") ||
                    !this.contrastSlider.hasAttribute("step")) {
                    return wrong("Looks like your brightness slider doesn't have one of the following attributes:" +
                        " 'min', 'max' or 'step'")
                }

                if (this.transparentSlider === null) {
                    return wrong("Can't find a transparent slider! There is should be an input tag with #transparent id.")
                }

                if (!this.transparentSlider.hasAttribute("min") ||
                    !this.transparentSlider.hasAttribute("max") ||
                    !this.transparentSlider.hasAttribute("step")) {
                    return wrong("Looks like your brightness slider doesn't have one of the following attributes:" +
                        " 'min', 'max' or 'step'")
                }

                return correct()
            }),
            this.page.execute(() => {

                const brightnessMinValue = parseInt(this.brightnessSlider.getAttribute("min"));
                const brightnessMaxValue = parseInt(this.brightnessSlider.getAttribute("max"));
                const brightnessStepValue = parseInt(this.brightnessSlider.getAttribute("step"));

                if (brightnessMinValue !== -255 || brightnessMaxValue !== 255 || brightnessStepValue !== 1) {
                    return wrong("Brightness slider should have the following attribute values: " +
                        "min=-255, max=255, step=1")
                }

                const contrastMinValue = parseInt(this.contrastSlider.getAttribute("min"));
                const contrastMaxValue = parseInt(this.contrastSlider.getAttribute("max"));
                const contrastStepValue = parseInt(this.contrastSlider.getAttribute("step"));

                if (contrastMinValue !== -128 || contrastMaxValue !== 128 || contrastStepValue !== 1) {
                    return wrong("Contrast slider should have the following attribute values: " +
                        "min=-128, max=128, step=1")
                }

                const transparentMinValue = parseInt(this.transparentSlider.getAttribute("min"));
                const transparentMaxValue = parseInt(this.transparentSlider.getAttribute("max"));
                const transparentStepValue = parseFloat(this.transparentSlider.getAttribute("step"));

                if (transparentMinValue !== 0 || transparentMaxValue !== 1 || transparentStepValue !== 0.1) {
                    return wrong("Transparent slider should have the following attribute values: " +
                        "min=0, max=1, step=0.1")
                }

                const brightnessDefaultValue = parseInt(this.brightnessSlider.value)
                const contrastDefaultValue = parseInt(this.contrastSlider.value)
                const transparentDefaultValue = parseInt(this.transparentSlider.value)

                if (brightnessDefaultValue !== 0) {
                    return wrong("The default value of the brightness slider should be equal to 0!")
                }

                if (contrastDefaultValue !== 0) {
                    return wrong("The default value of the contrast slider should be equal to 0!")
                }

                if (transparentDefaultValue !== 1) {
                    return wrong("The default value of the transparent slider should be equal to 1!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                const uploadButton = await this.page.pageInstance.$("input[type='file']#file-input");
                await uploadButton.uploadFile(initImage);
                await uploadButton.evaluate(upload => upload.dispatchEvent(new Event('change', {bubbles: true})));
                await sleep(500)

                const userPixels = await this.page.evaluate(() => {
                    return this.getPixels()
                });

                const {data} = await pixels(initImage)

                const compareResult = comparePixels(userPixels, data,
                    "After downloading an image into canvas it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                return correct()
            }),
            this.node.execute(async () => {

                // testBrightness 87
                // testContrast 69
                // testTransparent 0.5

                let userPixels = await this.page.evaluate(() => {
                    this.brightnessSlider.value = 87;
                    this.brightnessSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                let realPixels = await pixels(brightnessTestImage)

                let compareResult = comparePixels(userPixels, realPixels.data,
                    "After increasing brightness of the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await this.page.evaluate(() => {
                    this.brightnessSlider.value = 0;
                    this.brightnessSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(initImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After decreasing brightness of the image to the default value it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await this.page.evaluate(() => {
                    this.contrastSlider.value = 69;
                    this.contrastSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(contrastTestImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After increasing contrast of the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await this.page.evaluate(() => {
                    this.contrastSlider.value = 0;
                    this.contrastSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(initImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After decreasing contrast of the image to the default value it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await this.page.evaluate(() => {
                    this.transparentSlider.value = 0.5;
                    this.transparentSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(transparentTestImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After decreasing transparent of the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await this.page.evaluate(() => {
                    this.transparentSlider.value = 1;
                    this.transparentSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(initImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After increasing transparent of the image to the default value it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await this.page.evaluate(() => {
                    this.brightnessSlider.value = 92;
                    this.brightnessSlider.dispatchEvent(new Event("change"))

                    this.contrastSlider.value = 128;
                    this.contrastSlider.dispatchEvent(new Event("change"))

                    this.transparentSlider.value = 0.8;
                    this.transparentSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(multipleFilterTestImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After applying multiple filters to the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                return correct()
            })
        ]
    }


    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new HypergramTest().runTests()
    }, 30000)
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/14424#comment
status: Unchecked
record: -1
