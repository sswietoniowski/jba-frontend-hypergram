type: edu
custom_name: What a landscape!
files:
- name: src/index.html
  visible: true
  text: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Hypergram</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |-
    const pixels = require('image-pixels')
    const path = require('path');
    const filePath = path.resolve(__dirname, '../test/testImage.png');
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    const {StageTest, correct, wrong} = require('hs-test-web');

    class HypergramTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                const canvas = document.getElementsByTagName("canvas");
                if (canvas.length !== 1) {
                    return wrong("There is should be 1 canvas element in the page!")
                }

                const uploadButton = document.querySelector("input[type='file']#file-input");
                if (uploadButton === null) {
                    return wrong("Can't find a file upload input field. It should have type 'file' and #file-input id.")
                }

                const brightnessSlider = document.querySelector("input[type='range']#brightness");
                if (brightnessSlider === null) {
                    return wrong("Can't slider for brightness parameter. " +
                        "There is should be an 'input' tag with type 'range' and with #brigtness id!")
                }

                const contrastSlider = document.querySelector("input[type='range']#contrast");
                if (contrastSlider === null) {
                    return wrong("Can't slider for contrast parameter. " +
                        "There is should be an 'input' tag with type 'range' and with #contrast id!")
                }

                const transparent = document.querySelector("input[type='range']#transparent");
                if (transparent === null) {
                    return wrong("Can't slider for transparent parameter. " +
                        "There is should be an 'input' tag with type 'range' and with #transparent id!")
                }

                const saveButton = document.querySelector("button#save-button");
                if (saveButton === null) {
                    return wrong("Can't find a button with #save-button id!")
                }

                return correct()
            }),
            this.node.execute(async () => {
                const uploadButton = await this.page.pageInstance.$("input[type='file']#file-input");
                await uploadButton.uploadFile(filePath);
                await uploadButton.evaluate(upload => upload.dispatchEvent(new Event('change', {bubbles: true})));
                await sleep(500)

                const userPixels = await this.page.evaluate(() => {
                    const canvas = document.getElementsByTagName("canvas")[0];
                    if (canvas.width !== 30 || canvas.height !== 30) {
                        return wrong("After uploading an image into canvas it has wrong size!")
                    }
                    const ctx = canvas.getContext("2d");
                    return ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                });

                const {data} = await pixels(filePath)

                if (data.length !== Object.keys(userPixels).length) {
                    return wrong("Wrong number ox pixels on the canvas!")
                }

                for (let i = 0; i < data.length; i++) {
                    if (data[i] !== userPixels[i]) {
                        return wrong("Looks like some of the pixels have wrong RGB value!")
                    }
                }

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new HypergramTest().runTests()
    }, 30000)
  learner_created: false
- name: test/testImage.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAE4UlEQVRIS51WTUxcVRT+7n3zg5SfdlpIjUlpqC5qC5WVqN2LStNhY+K0NdVVuzWi4EJjTJA6LowxqSb+kBTHZSE0hkCjCRBlZwu0uBHb1BjS4EA7Uebvvavn/rz35s2bofUtZu4779zzfec75/6w9u8nxUakEwIWBATkw+jHMQMwAQhORhooF+2kbHKCdPLG9M603Z2i5zMGhtkbbigVxASS6Dq+H5CC+/1MVDIzPZ0DjIjX8JNhZ5eJWmUW8lUT8NHystWMhM6K/rlxpH8iV/+pzNjg+8GMWkYIXwmUIpRl2ATi7peefEkFRZrhqpa6xlyPt3YgOf0lcB0C9RSWvwaV6TMRrLH57mehbRKQeTWX1dDvrrvj2aQSQIJvICvaPFWk3SHglRCUAHsJYurmyeX2BncAx9RJ+SUYASZ8vWNgFFmGGZKaoZP/hi5+XTpOlge8fnNF8DWMW6tKBRPsL2TFXtA/BciKfUhFx5EppuS7yn6vqlTn1SmhABmWnWOyAdacQ15Xy+RrLQuVpQH00zgb/Rpjpdd9LULEba+5Xv1hUDxq/YkWbCHGbNmlFwvn0cWXZL0mnQG9mYQvjwTLyg8kayqawaLdi15rEdPlPmkfjo9iMJ9GKvotMuUUElCqsHfnXhbNuC8BNx1Vk5HCMDr5msx0TRxSS4a2r+CjTQRogIxLX2QaPdY1d8Zg/iNJjMApLkvP9anpcnvTDSIc+b5QelbaJm2qeQgwgFQkg2lbZxcbxT3Rgj/EYzjCV6t4/mI/pYAp6jtzp8QeKZfpSu2vwYcLIyiLmDIGXJRREUrHB12HG/ZhHLFuVkz4sDjk63KApedfDE9FxnQwWPjYMHEbw01FqkSgb4YfGprpptiNz0vn3F6QOZz88QNxPPJTaDqbzh6MFId9klVzpOaixko3vB2QVvnS7zW7R46NzBI4Pf+CuFg8h/OxLyoAFkrPYdJJVtXJfyzKTi29orKuAvbKQDWirG85HciUT6nmujD/kuCC1pfaUYhhJp9EkTfhlnMAjzj3sM1bZXAa09PqrLuECmwXkvFZtPEsdvFiNVEAb21fkLureRgcsMaZefFG/DO0sJzbKMy9EDB8db8POYv2WoZm564cJ+w7KKEBbfaveLrxDq7/3QomHBxr3kZ7rIhtmyNesMEbGbKfOuAtwPX+uMT9hyXQKLJg/RMnhRAMgnPsjth4fCaP6ICFuCWQty0sbsVQ4g1SiigKSibqeNNynIMJG082laXFYkDz7zY5A3RrKQhsHbSwmovoGeocYP2XCdiTofu7ApZScd8Vh5a0OvAlnj4/pC1kfTVwgSfGi2h6HsgdtLCSi+BwsyK1miM2qvYS2F+YrkwBywS8w3P09gmsdEzV9FJxGmp+Z/2XkwHgfOiEo7f7sdJxpSpQLXtXpjqO37cK2B85OXQWE6NjrunSOHDm9E5aAPu7f0bbUM/DZbxzWM+DANaXngmZEtxognutrvGlcYYzpwV2qhshGN8wgt78ylujP25y6DVMjH5T2Vx+h6njGzixsO+BBDDBHsjZLKpgV9fPxPv6f8D8sdnQJ18Ksyze77qL95bb6xKvXw4G1YCqxkFf9X5FXvd1V4efjGFZ1arx/u5FrC/11ldbAMlhqvEYVMYH9EYQetA/TOXqNLh7Y2YQ/91S/wXtwCFuAL7UBQAAAABJRU5ErkJggg==
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/14423#comment
status: Unchecked
record: -1
